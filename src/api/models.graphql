type User {
  id: Int!
  name: String!
  email: String!
  phoneNumber: String!
  following: [User!]
  followingCount: Int
  followers: [User!]
  followersCount: Int
  avatar: String
  bio: String
  posts: [Post!]
  postCount: Int
  likes: [Like!]
  comments: [Comment!]
  riggingRecords: [CraneData!]
  createdAt: String
  updatedAt: String
  purchaseHistory: [PurchaseHistory!]
  overWorks: [OverWork]
}

type Post {
  id: Int!
  createdAt: String
  updatedAt: String
  content: String
  postCategory: PostCategory
  postAuthor: User!
  postAuthorId: Int!
  files: [File!]
  likes: [Like!]
  isLiked: Boolean
  comments: [Comment!]
  likeCount: Int
  commentCount: Int
}

type File {
  id: Int!
  createdAt: String
  updatedAt: String
  url: String!
  post: Post!
}

type Like {
  id: Int!
  createdAt: String
  updatedAt: String
  user: User!
  post: Post!
}

type Comment {
  id: Int!
  createdAt: String
  updatedAt: String
  content: String
  commentAuthor: User!
  post: Post!
}

type OverWork {
  id: Int!
  createdAt: String
  updatedAt: String
  date: Date
  yearMonth: String
  yearMonthDay: String
  week: Int
  workingTime: String
  location: String
  content: String
  amount: Int
  overWorkCategory: OverWorkCategory
  overWorkAuthor: User
}

type CraneData {
  craneName: String
  paid: Boolean
  craneCode: String
  craneModeName: String
  excelSheetName: String
  craneData: RiggingData
}

type RiggingData {
  mainBoom: Float
  mainAngle: Float
  totalExtLength: Float
  adapter1: Float
  extBoom1: Float
  extBoom2: Float
  extBoom3: Float
  extBoom4: Float
  adapter2: Float
  flyFixLuffing: Float
  flyFixLuffingAngle: Float
  distance1: Float
  distance2: Float
  craneDistance: Float
  edgeDistance: EdgeDistance
  centerToBuildingDistance: Float
  centerToBlockDistance: Float
  craneToBuildingDistance: Float
  craneToBlockDistance: Float
  totalDistance: Float
  tableDistance: Float
  height1: Float
  height2: Float
  totalHeight: Float
  marginHeight: Float
  workingArea: Float
  tableWeight: Float
  counterWeight: String
  overRear: String
  optional: String
  safetyFactor: Float
  craneLocation: String
  workWeight: Float
  workBuilding: workBuilding
  block: Block
}

type workBuilding {
  horizontal: Float
  vertical: Float!
  height: Float!
}

type Block {
  vertical1: Float
  horizontal1: Float
  height1: Float
  vertical2: Float
  height2: Float
}

type EdgeDistance {
  mainToBlock: Float
  mainToBuilding: Float
  flyFixLuffingToBlock: Float
  flyFixLuffingToBuilding: Float
}

type PurchaseHistory {
  id: Int!
  createdAt: String
  updatedAt: String
  date: String
  paidCranes: [PaidCraneNames!]
  cardCompany: String
  price: Int
  authCode: String
  installment: String
  receipt: String
  user: User
  paid: Boolean
}

type PaidCraneNames {
  id: Int!
  createdAt: String
  updatedAt: String
  craneName: String
}

type TmpPurchaseHistory {
  id: Int!
  phoneNumber: String
  craneNames: [TmpCraneNames!]
  price: Int
  authCode: String
  paid: Boolean
}

type TmpCraneNames {
  id: Int!
  craneName: String
}

scalar Date

enum PostCategory {
  JOB
  REPAIR
  ETC
}

enum OverWorkCategory {
  EARLY
  NIGHT
  ALLNIGHT
  WEEKEND
  OVERTIME
}

enum Actions {
  EDIT
  DELETE
}
