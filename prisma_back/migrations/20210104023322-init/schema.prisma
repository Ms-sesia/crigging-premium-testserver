generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = "***"
}

model User {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String            @unique
  email           String            @unique
  phoneNumber     String            @unique
  loginSecretCode String?
  avatar          String            @default(value: "")
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  riggingRecord   craneDataRecord[]
  overWorks       OverWork[]
  following       User[]            @relation("FollowRelation", references: [id])
  followers       User[]            @relation("FollowRelation", references: [id])
}

model Post {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  title        String
  content      String?
  postCategory PostCategory
  comments     Comment[]
  likes        Like[]
  postAuthor   User         @relation(fields: [postAuthorId], references: [id])
  postAuthorId Int
  files        File[]
}

model Comment {
  id              Int      @id @default(autoincrement())
  content         String
  post            Post     @relation(fields: [postId], references: [id])
  postId          Int
  commentAuthor   User     @relation(fields: [commentAuthorId], references: [id])
  commentAuthorId Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  postId    Int
}

model craneDataRecord {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  riggingIndex   Int
  craneName      String?
  craneCode      String?
  craneModeName  String?
  excelSheetName String?
  riggingData    RiggingData @relation(fields: [riggingDataId], references: [id])
  riggingDataId  Int
  user           User?       @relation(fields: [userId], references: [id])
  userId         Int?
}

model RiggingData {
  id                      Int               @id @default(autoincrement())
  mainBoom                Int
  mainAngle               Int
  totalExtLength          Int
  adapter1                Int
  extBoom1                Int
  extBoom2                Int
  extBoom3                Int
  extBoom4                Int
  adapter2                Int
  flyFixLuffing           Int
  flyFixLuffingAngle      Int
  distance1               Int
  distance2               Int
  craneDistance           Int
  edgeDistance            EdgeDistance      @relation(fields: [edgeDistanceId], references: [id])
  edgeDistanceId          Int
  centerToBlockDistance   Int
  craneToBuildingDistance Int
  craneToBlockDistance    Int
  totalDistance           Int
  tableDistance           Int
  height1                 Int
  height2                 Int
  totalHeight             Int
  marginHeight            Int
  workingArea             Int
  tableWeight             Int
  counterWeight           String
  overRear                String
  optional                String
  safetyFactor            Int
  craneLocation           String
  workWeight              Int
  workBuilding            WorkBuilding      @relation(fields: [workBuildingId], references: [id])
  workBuildingId          Int
  block                   Block             @relation(fields: [blockId], references: [id])
  blockId                 Int
  // craneDataRecord         craneDataRecord[]
}

model EdgeDistance {
  id                       Int           @id @default(autoincrement())
  mainToBlock              Int
  mainToBuilding           Int
  flyFixLuffingToBlock     Int
  flyFixLuffingToBuilding  Int
  centerToBuildingDistance Int
  // RiggingData              RiggingData[]
}

model WorkBuilding {
  id          Int           @id @default(autoincrement())
  horizontal  Int
  vertical    Int
  height      Int
  // RiggingData RiggingData[]
}

model Block {
  id          Int           @id @default(autoincrement())
  vertical1   Int
  horizontal1 Int
  height1     Int
  vertical2   Int
  height2     Int
  // RiggingData RiggingData[]
}

model OverWork {
  id               Int              @id @default(autoincrement())
  date             DateTime?
  yearMonth        String?
  yearMonthDay     String?
  week             Int
  workingTime      String
  location         String
  content          String
  overWorkCategory OverWorkCategory
  amount           Int
  overWorkAuthor   User             @relation(fields: [overWorkAuthorId], references: [id])
  overWorkAuthorId Int
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model File {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

enum PostCategory {
  JOB
  REPAIR
  ETC
}

enum OverWorkCategory {
  EARLY
  NIGHT
  ALLNIGHT
  WEEKEND
  OVERTIME
}
