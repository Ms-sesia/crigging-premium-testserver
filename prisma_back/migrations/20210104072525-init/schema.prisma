generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = "***"
}

model User {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String            @unique
  email           String            @unique
  phoneNumber     String            @unique
  loginSecretCode String?
  avatar          String            @default(value: "")
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  riggingRecords  craneData[]
  overWorks       OverWork[]
  following       User[]            @relation("FollowRelation", references: [id])
  followers       User[]            @relation("FollowRelation", references: [id])
}

model Post {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  title        String
  content      String?
  postCategory PostCategory
  comments     Comment[]
  likes        Like[]
  postAuthor   User         @relation(fields: [postAuthorId], references: [id])
  postAuthorId Int
  files        File[]
}

model Comment {
  id              Int      @id @default(autoincrement())
  content         String
  post            Post     @relation(fields: [postId], references: [id])
  postId          Int
  commentAuthor   User     @relation(fields: [commentAuthorId], references: [id])
  commentAuthorId Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  postId    Int
}

model craneData {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  riggingIndex   Int
  craneName      String?
  craneCode      String?
  craneModeName  String?
  excelSheetName String?
  riggingData    RiggingData @relation(fields: [riggingDataId], references: [id])
  riggingDataId  Int
  user           User?       @relation(fields: [userId], references: [id])
  userId         Int?
}

model RiggingData {
  id                       Int               @id @default(autoincrement())
  mainBoom                 Float
  mainAngle                Float
  totalExtLength           Float
  adapter1                 Float
  extBoom1                 Float
  extBoom2                 Float
  extBoom3                 Float
  extBoom4                 Float
  adapter2                 Float
  flyFixLuffing            Float
  flyFixLuffingAngle       Float
  distance1                Float
  distance2                Float
  craneDistance            Float
  edgeDistance             EdgeDistance      @relation(fields: [edgeDistanceId], references: [id])
  edgeDistanceId           Int
  centerToBuildingDistance Float
  centerToBlockDistance    Float
  craneToBuildingDistance  Float
  craneToBlockDistance     Float
  totalDistance            Float
  tableDistance            Float
  height1                  Float
  height2                  Float
  totalHeight              Float
  marginHeight             Float
  workingArea              Float
  tableWeight              Float
  counterWeight            String
  overRear                 String
  optional                 String
  safetyFactor             Float
  craneLocation            String
  workWeight               Float
  workBuilding             WorkBuilding      @relation(fields: [workBuildingId], references: [id])
  workBuildingId           Int
  block                    Block             @relation(fields: [blockId], references: [id])
  blockId                  Int
}

model EdgeDistance {
  id                      Int           @id @default(autoincrement())
  mainToBlock             Float
  mainToBuilding          Float
  flyFixLuffingToBlock    Float
  flyFixLuffingToBuilding Float
}

model WorkBuilding {
  id          Int           @id @default(autoincrement())
  horizontal  Float
  vertical    Float
  height      Float
}

model Block {
  id          Int           @id @default(autoincrement())
  vertical1   Float
  horizontal1 Float
  height1     Float
  vertical2   Float
  height2     Float
}

model OverWork {
  id               Int              @id @default(autoincrement())
  date             DateTime?
  yearMonth        String?
  yearMonthDay     String?
  week             Int
  workingTime      String
  location         String
  content          String
  overWorkCategory OverWorkCategory
  amount           Int
  overWorkAuthor   User             @relation(fields: [overWorkAuthorId], references: [id])
  overWorkAuthorId Int
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model File {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

enum PostCategory {
  JOB
  REPAIR
  ETC
}

enum OverWorkCategory {
  EARLY
  NIGHT
  ALLNIGHT
  WEEKEND
  OVERTIME
}
